
*packer.nvim*

Author: Wil Thomason <wil.thomason@gmail.com>

CONTENTS                                        *packer-contents*
Introduction                                    |packer-introduction|
  Features                                      |packer-intro-features|
  Requirements                                  |packer-intro-requirements|
  Quickstart                                    |packer-intro-quickstart|
Usage                                           |packer-usage|
API                                             |packer-api|
==============================================================================
INTRODUCTION                                    *packer-introduction*

This is a Neovim plugin manager. It is written in Lua, uses the native
|packages| feature, and has features for declarative plugin configuration
inspired by the `use-package` library from Emacs.

==============================================================================
REQUIREMENTS                                     *packer-intro-requirements*

- You need to be running Neovim v0.7.0+
- If you are on Windows 10, you need developer mode enabled in order to use
  local plugins (creating symbolic links requires admin privileges on Windows
  - credit to @TimUntersberger for this note)

==============================================================================
FEATURES                                         *packer-intro-features*

- Declarative plugin specification
- Support for dependencies
- Expressive configuration and lazy-loading options
- Uses native packages
- Extensible
- Written in Lua, configured in Lua
- Post-install/update hooks
- Uses jobs for async installation
- Support for `git` tags, branches, revisions
- Support for local plugins

==============================================================================
QUICKSTART                                       *packer-intro-quickstart*

To get started, first clone this repository to somewhere on your `packpath`, e.g.: >
  git clone https://github.com/wbthomason/packer.nvim\
   ~/.local/share/nvim/site/pack/packer/opt/packer.nvim


Then you can write your plugin specification in Lua, e.g. (in `~/.config/nvim/lua/plugins.lua`): >

  -- This file can be loaded by calling `lua require('plugins')` from your init.vim

  -- Only required if you have packer in your `opt` pack
  vim.cmd [[packadd packer.nvim]]
  -- Only if your version of Neovim doesn't have https://github.com/neovim/neovim/pull/12632 merged
  vim._update_package_paths()

  return require('packer').add{
    -- Packer can manage itself as an optional plugin
    {'wbthomason/packer.nvim'},

    -- Simple plugins can be specified as strings
    '9mm/vim-closer'

    -- Load on specific commands
    {'tpope/vim-dispatch', cmd = {'Dispatch', 'Make', 'Focus', 'Start'}},

    -- Load on an autocommand event
    {'andymass/vim-matchup', event = 'VimEnter *'},

    -- Load on a combination of conditions: specific filetypes or commands
    -- Also run code after load (see the "config" key)
    {
      'w0rp/ale',
      ft = {'sh', 'zsh', 'bash', 'c', 'cpp', 'cmake', 'html', 'markdown', 'racket', 'vim', 'tex'},
      cmd = 'ALEEnable',
      config = 'vim.cmd[[ALEEnable]]'
    },

    -- Plugins can have dependencies on other plugins
    {
      'haorenW1025/completion-nvim',
      requires = {
        'hrsh7th/vim-vsnip',
        'hrsh7th/vim-vsnip-integ',
      }
    },

    -- Local plugins can be included
    '~/projects/personal/hover.nvim',

    -- Plugins can have post-install/update hooks
    {'iamcco/markdown-preview.nvim', run = 'cd app && yarn install', cmd = 'MarkdownPreview'}
  }

`packer` provides the following commands: *packer-default-commands* *packer-commands*

`PackerClean`                                   *packer-commands-clean*
Remove any disabled or unused plugins.

`PackerInstall`                                 *packer-commands-install*
Clean, then install missing plugins.

`PackerUpdate`                                  *packer-commands-update*
Update installed plugins.
Supports the `--preview` flag as an optional first argument to preview
updates.

`PackerSync`                                    *packer-commands-sync*
Clean, then update and install plugins.
Supports the `--preview` flag as an optional first argument to preview
updates.

==============================================================================
USAGE                                          *packer-usage*

Although the example in |packer-intro-quickstart| will be enough to get you
going for basic usage, `packer` has a number of other features and options
detailed in this section.

STARTUP                                        *packer-startup*

The easiest way to use `packer` is via the |packer.add()| function.
`spec` should be a table containing a list of plugin specs: >lua

  packer.add{
    {'tjdevries/colorbuddy.vim', config = { ... }}
  }

<

Configuration can be provided via |packer.setup()|: >lua

  packer.setup{
    -- YOUR CONFIG HERE --
  }

See |packer-configuration| for the allowed configuration keys.


CONFIGURATION                                  *packer-configuration*
`packer` provides the following configuration variables, presented in the
structure of the `config` table expected by `startup` or `init`, with their
default values: >
  {
    package_root   = util.join_paths(vim.fn.stdpath('data'), 'site', 'pack'),
    plugin_package = 'packer', -- The default package for plugins
    max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit
    git = {
      cmd                = 'git', -- The base command for git operations
      depth              = 1, -- Git clone depth
      clone_timeout      = 60, -- Timeout, in seconds, for git clones
      default_url_format = 'https://github.com/%s' -- Lua format string used for "aaa/bbb" style plugins
    },
    log = { level = 'warn' }, -- The default print log level. One of: "trace", "debug", "info", "warn", "error", "fatal".
    display = {
      non_interactive = false, -- If true, disable display windows for all operations
      working_sym     = '⟳', -- The symbol for a plugin being installed/updated
      error_sym       = '✗', -- The symbol for a plugin with an error in installation/updating
      done_sym        = '✓', -- The symbol for a plugin which has completed installation/updating
      removed_sym     = '-', -- The symbol for an unused plugin which was removed
      moved_sym       = '→', -- The symbol for a plugin which was moved (e.g. from opt to start)
      header_sym      = '━', -- The symbol for the header line in packer's display
      show_all_info   = true, -- Should packer show all update details automatically?
      prompt_border   = 'double', -- Border style of prompt popups.
      keybindings = { -- Keybindings for the display window
        quit          = 'q',
        toggle_update = 'u', -- only in preview
        continue      = 'c', -- only in preview
        toggle_info   = '<CR>',
        diff          = 'd',
        prompt_revert = 'r',
      }
    }
  }

<

SPECIFYING PLUGINS                             *packer-specifying-plugins*
`packer` is based around declarative specification of plugins. You can declare
a plugin using the function |packer.add()|.

`add` takes a list of plugin specifications (strings or tables)

Plugin locations may be specified as:
  1. Absolute paths to a local plugin
  2. Full URLs (treated as plugins managed with `git`)
  3. `username/repo` paths (treated as Github `git` plugins)

CONFIGURING PLUGINS                            *packer-plugin-configuration*
`packer` allows you to configure plugins either before they are loaded (the
`config_pre` key described in |packer.add()|) or after they are loaded (the
`config` key described in |packer.use()|).
If functions are given for these keys, the functions will be passed the plugin
name and information table as arguments.

PLUGIN STATUSES                                 *packer-plugin-status*
You can check whether or not a particular plugin is installed with `packer` as
well as if that plugin is loaded. To do this you can check for the plugin's
name in the `packer_plugins` global table. Plugins in this table are saved
using only the last section of their names e.g. `tpope/vim-fugitive` if
installed will be under the key `vim-fugitive`.
>
  if packer_plugins["vim-fugitive"] and packer_plugins["vim-fugitive"].loaded then
  print("Vim fugitive is loaded")
  -- other custom logic
  end

POST-UPDATE HOOKS                              *packer-plugin-hooks*
You may specify operations to be run after successful installs/updates of a
plugin with the `run` key. This key may either be a Lua function, which will be
called with the `plugin` table for this plugin (containing the information
passed to `use` as well as output from the installation/update commands, the
installation path of the plugin, etc.), a string, or a table of functions and
strings.

If an element of `run` is a string, then either:

1. If the first character of `run` is ":", it is treated as a Neovim command and
executed.
2. Otherwise, `run` is treated as a shell command and run in the installation
directory of the plugin via `$SHELL -c '<run>'`.

DEPENDENCIES                                   *packer-plugin-dependencies*
Plugins may specify dependencies via the `requires` key in their specification
table. This key can be a string or a list (table).

If `requires` is a string, it is treated as specifying a single plugin. If a
plugin with the name given in `requires` is already known in the managed set,
nothing happens. Otherwise, the string is treated as a plugin location string
and the corresponding plugin is added to the managed set.

If `requires` is a list, it is treated as a list of plugin specifications
following the format given above.

If `ensure_dependencies` is true, the plugins specified in `requires` will be
installed.

Plugins specified in `requires` are removed when no active plugins require
them.

KEYBINDINGS                                    *packer-plugin-keybindings*
Plugins may be lazy-loaded on the use of keybindings/maps. Individual
keybindings are specified under the `keys` key in a plugin specification
either as a string (in which case they are treated as normal mode maps) or a
table in the format `{mode, map}`.

RESULTS WINDOW KEYBINDINGS                     *packer-results-keybindings*
Once an operation completes, the results are shown in the display window.
`packer` sets up default keybindings for this window:

q                    close the display window
<CR>                 toggle information about a particular plugin
r                    revert an update

They can be configured by changing the value of `config.display.keybindings`
(see |packer-configuration|). Setting it to `false` will disable all keybindings.
Setting any of its keys to `false` will disable the corresponding keybinding.

==============================================================================
API                                            *packer-api*

setup({config})                                                *packer.setup()*
    Setup and configure packer.

    If the user does not call this it will be called internally by
    |packer.add()|.

add({spec})                                                     *packer.spec()*
    `use` allows you to add one or more plugins to the managed set. It can be
    invoked as follows:
    - With a single plugin location string, e.g. `use <STRING>`
    - With a single plugin specification table, e.g. >
      {
        'myusername/example',        -- The plugin location string
        -- The following keys are all optional
        opt = boolean,               -- Manually marks a plugin as optional.
        branch = string,             -- Specifies a git branch to use
        tag = string,                -- Specifies a git tag to use. Supports '*' for "latest tag"
        commit = string,             -- Specifies a git commit to use
        lock = boolean,              -- Skip updating this plugin in updates/syncs. Still cleans.
        run = string, function, or table  -- Post-update/install hook. See |packer-plugin-hooks|
        requires = string or list    -- Specifies plugin dependencies. See |packer-plugin-dependencies|
        config = string or function, -- Specifies code to run after this plugin is loaded.
        -- The following keys all imply lazy-loading
        cmd = string or list,        -- Specifies commands which load this plugin.  Can be an autocmd pattern.
        ft = string or list,         -- Specifies filetypes which load this plugin.
        keys = string or list,       -- Specifies maps which load this plugin. See |packer-plugin-keybindings|
        event = string or list,      -- Specifies autocommand events which load this plugin.
        fn = string or list          -- Specifies functions which load this plugin.
      }
    - With a list of plugins specified in either of the above two forms

    For the *cmd* option, the command may be a full command, or an autocommand pattern. If the command contains any
    non-alphanumeric characters, it is assumed to be a pattern, and instead of creating a stub command, it creates
    a CmdUndefined autocmd to load the plugin when a command that matches the pattern is invoked.

 vim:tw=78:ts=2:ft=help:norl:
